#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "board.h"
#include "callback.h"
#include "chip.h"
#include "cpuidle.h"
#include "gpio/pio.h"
#include "mm/cache.h"
#include "mutex.h"
#include "peripherals/pmc.h"
#include "serial/console.h"
#include "serial/usart.h"
#include "serial/usartd.h"


#ifdef VARIANT_DDRAM
#define CMD_BUFFER_SIZE   256*1024
#define READ_BUFFER_SIZE  256*1024
#else
#define CMD_BUFFER_SIZE  256
#define READ_BUFFER_SIZE  256
#endif


//#ifdefined CONFIG_BOARD_SAMV71_XPLAINED
#define USART_ADDR USART2
#define USART_PINS PINS_USART2


static const struct _pin usart_pins[] = USART_PINS;

CACHE_ALIGNED static uint8_t cmd_buffer[CMD_BUFFER_SIZE];
CACHE_ALIGNED static uint8_t read_buffer[READ_BUFFER_SIZE];

typedef void (*_parser)(const uint8_t*, uint32_t);

static _parser _cmd_parser;
static volatile uint32_t cmd_index = 0;

static struct _usart_desc usart_desc = {
	.addr           = USART_ADDR,
	.baudrate       = 115200,
	.mode           = US_MR_CHMODE_NORMAL | US_MR_PAR_NO | US_MR_CHRL_8_BIT,
	.transfer_mode  = USARTD_MODE_POLLING,
	.timeout        = 500, // unit: ms
};

static void console_handler(uint8_t key)
{
	static uint32_t index = 0;
	if (index >= CMD_BUFFER_SIZE) {
		printf("\r\nWARNING! command buffer size exeeded, "
		       "reseting\r\n");
		index = 0;
	}
	console_echo(key);
	switch (key) {
	case '\r':
	case '\n':
		cmd_buffer[index]='\0';
		cmd_index = index;
		index = 0;
		break;
	case 0x7F:
	case '\b':
		cmd_buffer[--index]='\0';
		break;
	default:
		cmd_buffer[index++]=key;
		break;
	}
}

static int _usart_finish_rx_transfer_callback(void* arg, void* arg2)
{
	usartd_finish_rx_transfer(0);
	return 0;
}

static void _usart_read_arg_parser(const uint8_t* buffer, uint32_t len)
{
	memset(read_buffer, 0x0, sizeof(read_buffer));
	char* end_addr = NULL;
	unsigned int size = strtoul((char*)buffer, &end_addr, 0);
	unsigned int _len = 0;
	if (end_addr == (char*)buffer) {
		printf("Args: %s\r\n"
		       "Invalid address\r\n",
			buffer);
		return;
	}

	memset(read_buffer, 0, ARRAY_SIZE(read_buffer));
	cache_clean_region(read_buffer, ARRAY_SIZE(read_buffer));
	while (_len < size) {
		struct _buffer rx = {
			.data = (unsigned char*)read_buffer + _len,
			.size = size - _len,
			.attr = USARTD_BUF_ATTR_READ,
		};
		struct _callback _cb = {
			.method = _usart_finish_rx_transfer_callback,
			.arg = 0,
		};
		usartd_transfer(0, &rx, &_cb);
		usartd_wait_rx_transfer(0);
		_len += usart_desc.rx.transferred;
	}
	printf("%s\r\n", read_buffer);
}

static int _usart_finish_tx_transfer_callback(void* arg, void* arg2)
{
	usartd_finish_tx_transfer(0);
	return 0;
}

static void _usart_write_arg_parser(const uint8_t* buffer, uint32_t len)
{
	struct _buffer tx = {
		.data = (unsigned char*)buffer,
		.size = len,
		.attr = USARTD_BUF_ATTR_WRITE,
	};
	struct _callback _cb = {
		.method = _usart_finish_tx_transfer_callback,
		.arg = 0,
	};
	usartd_transfer(0, &tx, &_cb);
	usartd_wait_tx_transfer(0);
}

static void print_menu(void)
{
	printf("\r\n\r\nUSART transfer mode: ");
	switch (usart_desc.transfer_mode) {
	case USARTD_MODE_POLLING:
		printf("POLLING\r\n");
		break;
	case USARTD_MODE_ASYNC:
		printf("ASYNC\r\n");
		break;
	case USARTD_MODE_DMA:
		printf("DMA\r\n");
		break;
	}
	printf("Usart example mini-console:\r\n\r\n"
	       "|===========        Commands        ====================|\r\n"
	       "| r size                                                |\r\n"
	       "|      Wait to recieve 'size' characters from usart and |\r\n"
	       "|      print the result string (block call)             |\r\n"
	       "| w str                                                 |\r\n"
	       "|      Write 'str' throught usart                       |\r\n"
	       "| m polling                                             |\r\n"
	       "| m async                                               |\r\n"
	       "| m dma                                                 |\r\n"
	       "|      Select transfer mode                             |\r\n"
#ifdef CONFIG_HAVE_USART_FIFO
	       "| f fifo                                                |\r\n"
	       "|      Toggle FIFO feature                              |\r\n"
#endif /* CONFIG_HAVE_USART_FIFO */
	       "| h                                                     |\r\n"
	       "|      Print this menu                                  |\r\n"
	       "|=======================================================|\r\n");
}

#ifdef CONFIG_HAVE_USART_FIFO
static void _usart_feature_arg_parser(const uint8_t* buffer, uint32_t len)
{
	if (!strncmp((char*)buffer, "fifo", 4)) {
		if (!usart_desc.use_fifo) {
			usart_desc.use_fifo = true;
			usart_fifo_enable(usart_desc.addr);
			printf("Enable FIFO\r\n");
		} else {
			usart_desc.use_fifo = false;
			usart_fifo_enable(usart_desc.addr);
			printf("Disable FIFO\r\n");
		}
	}
}
#endif /* CONFIG_HAVE_USART_FIFO */

static void _usart_mode_arg_parser(const uint8_t* buffer, uint32_t len)
{
	if (!strncmp((char*)buffer, "polling", 7)) {
		usart_desc.transfer_mode = USARTD_MODE_POLLING;
		printf("Use POLLING mode\r\n");
	}
	else if (!strncmp((char*)buffer, "async", 5)) {
		usart_desc.transfer_mode = USARTD_MODE_ASYNC;
		printf("Use ASYNC mode\r\n");
	}
	else if (!strncmp((char*)buffer, "dma", 3)) {
		usart_desc.transfer_mode = USARTD_MODE_DMA;
		printf("Use DMA mode\r\n");
	}
}

static void _usart_cmd_parser(const uint8_t* buffer, uint32_t len)
{
	if ((*buffer == 'h') || (*buffer == 'H')) {
		print_menu();
		return;
	}
	if (*(buffer+1) != ' ') {
		printf("Commands can only be one caracter size\r\n");
		printf("%c%c\r\n", *buffer, *(buffer+1));
		return;
	}
	switch(*buffer) {
	case 'w':
		_usart_write_arg_parser(buffer+2, len-2);
		break;
	case 'r':
		_usart_read_arg_parser(buffer+2, len-2);
		break;
	case 'm':
		_usart_mode_arg_parser(buffer+2, len-2);
		break;
#ifdef CONFIG_HAVE_USART_FIFO
	case 'f':
		_usart_feature_arg_parser(buffer+2, len-2);
		break;
#endif
	default:
		printf("Command %c unknown\r\n", *buffer);
	}

}

int main (void)
{
	/* Output example information */
	console_example_info("USART Example");

	/* Configure console interrupts */
	console_set_rx_handler(console_handler);
	console_enable_rx_interrupt();

	usartd_configure(0, &usart_desc);
	_cmd_parser = _usart_cmd_parser;

	/* configure spi serial flash pins */
	pio_configure(usart_pins, ARRAY_SIZE(usart_pins));

	print_menu();

	while (1) {
		cpu_idle();
		if (cmd_index > 0) {
			_cmd_parser(cmd_buffer, cmd_index);
			cmd_index = 0;
		}
	}
}


使用UART0的接收超时用于判断外部是否停止发送数据    设置 超时时间
UART0->TODR =  UartRecvOvtm ;
UART_Enable_ReceiveTimeOut(UART0);

使用前 ：
UART0->ISR = 0 ;
UART0->IER  = UART_IER_RXTOIE | UART_IER_RXBFIE ;
SetRegBit(UART0->CSR, UART_CSR_RXEN_Msk|UART_CSR_TXEN_Msk)；


但在中断中 检测不到 超时中断 ， 接收中断正常
...    uint32_t res = UART0->ISR ;
    // clear all interrupt flage but not receive error flage . it will be read when all data received  in dma interrupt.
    UART0->ISR  = 0xffff ;

    if((res & UART_ISR_RXTO)&&(UART0->IER&UART_IER_RXTOIE))
        ...
    if((res & UART_ISR_RXBF) && (UART0->IER&UART_IER_RXBFIE))

        ...
...
可以收到 接收成功中断。但无法收到超时中断 （测试时 断开了发送与接收的连接）。

原因是什么 ？  此外 超时的起始计数时间是否是使能 UART_CSR_RXEN 的时间 ， 后面每次收到一帧后清零重新开始？


修改  附上 完整的程序：
初始化， EnablePeriph(Clock_UART0); 为打开串口相关的时钟，相应的 DisablePeriph(Clock_UART0);     为关闭串口相关时钟 减低功耗。
void InitUart0(void)
{

    EnablePeriph(Clock_UART0);
    //  set txd and rxd as gpio output OC mode  .
    GPIO_EnablePinOpendrain(UART_TX_PORT,UART_RX_PIN|UART_TX_PIN);
    GPIO_DisablePinPullup(UART_TX_PORT,UART_RX_PIN|UART_TX_PIN);
    GPIO_SetOutputPin(UART_TX_PORT,UART_RX_PIN|UART_TX_PIN);   
    GPIO_SetPinMode(UART_RX_PORT,UART_RX_PIN,GPIO_MODE_OUTPUT);
    GPIO_SetPinMode(UART_TX_PORT,UART_TX_PIN,GPIO_MODE_OUTPUT);   

    #ifndef  Uart_SCH_Define
       ClrRegBit(UART_TX_PORT->DFS , UART_RX_PIN|UART_TX_PIN);
    #endif
    //set default value .
    UART0->CSR = 0 ;
    // enable read over time , rxd down edge wakeup(made a interrupt).

    //UART_Enable_NegtiveEdgeWakeup(UART0);
    //enable DMA send last byte interrupt .

    UART_SetTransferBitOrder(UART0,UART_DATA_BITORDER_LSBFIRST);
    UART_SetStopBitsLength(UART0,UART_STOPBITS_2);
    UART_SetDataWidth(UART0,UART_DATAWIDTH_8B);
    UART_SetParity(UART0,UART_PARITY_NONE);

    // set default value :
    UART0->IER = 0 ;
    // only enable the wakeup. for receive mode start .
    //UART_EnableIT_NegtiveEdgeWakeup(UART0);
    // clear interrupt flage.
    UART0->ISR = 0 ;
    // set send dealy and recv overtime .
    UART0->TODR =  UartRecvOvtm ;
    UART_Enable_ReceiveTimeOut(UART0);
    // for safe we used 9600 .
    UART0->BGR = UART0_Baud ;
    // enable ir .
    //UART_COMMON->IRCR = (IRTH<<11) | IRBRG ;
    //UART_Enable_InfraredModulation(UART0);
    NVIC_DisableIRQ(UART0_IRQn);
    NVIC_SetPriority(UART0_IRQn,2);//中断优先级配置
    NVIC_EnableIRQ(UART0_IRQn);     //使能NVIC   
    DisablePeriph(Clock_UART0);   
}


// 发送数据 并检测接收
// do fix data send . it enable recv , and send data sout
void Uart0DoIr(void)
{
    uint8_t  temp = 255;
    // enable the 3.3V  out .
    EnPowerOut();
    // delay a short time for the ir receiver to power up .
    while(temp >0)
    {
        __NOP();
        __NOP();
        __NOP();   
        temp -- ;
    }
    GPIO_DisablePinOpendrain(UART_TX_PORT,UART_RX_PIN|UART_TX_PIN);
    GPIO_SetPinMode(UART_RX_PORT,UART_RX_PIN,GPIO_MODE_DIGITAL);
    GPIO_SetPinMode(UART_TX_PORT,UART_TX_PIN,GPIO_MODE_DIGITAL);
    GPIO_EnablePinPullup(UART_TX_PORT,UART_RX_PIN);
    EnablePeriph(Clock_UART0);
    // enbale ir clock
    RCC->PCLKCR3 |= 1<<14 ;
    // send one byte ,try to receive it .
    UART0->TXBUF =CmdHeader;
    UART0->ISR = 0 ;
    UART0->IER  = UART_IER_RXTOIE | UART_IER_RXBFIE ;
    UART_Enable_ReceiveTimeOut(UART0);
    SetRegBit(UART0->CSR, UART_CSR_RXEN_Msk|UART_CSR_TXEN_Msk|UART_CSR_RXTOEN_Msk);
}
// 关闭串口 降低功耗
void Uart0Stop(void)
{
    UART0->IER = 0 ;
    ClrRegBit(UART0->CSR, UART_CSR_RXEN_Msk|UART_CSR_TXEN_Msk);
    // enbale ir clock
    RCC->PCLKCR3 &= (~(1<<14)) ;   
    StopPeriph(Clock_UART0);      
    GPIO_EnablePinOpendrain(UART_TX_PORT,UART_RX_PIN|UART_TX_PIN);
    GPIO_DisablePinPullup(UART_TX_PORT,UART_RX_PIN|UART_TX_PIN);
    GPIO_SetOutputPin(UART_TX_PORT,UART_RX_PIN|UART_TX_PIN);   
    GPIO_SetPinMode(UART_RX_PORT,UART_RX_PIN,GPIO_MODE_OUTPUT);
    GPIO_SetPinMode(UART_TX_PORT,UART_TX_PIN,GPIO_MODE_OUTPUT);  
}

//中断程序
void UART0_IRQHandler(void)
{
        StdEvt evt;
    uint32_t res = UART0->ISR ;
    // clear all interrupt flage but not receive error flage . it will be read when all data received  in dma interrupt.
    UART0->ISR  = 0xffff ;

    if((res & UART_ISR_RXTO)&&(UART0->IER&UART_IER_RXTOIE))
    { // receive message stoped .

        evt = makeevt(Sig_Ir_OVT,0);
        postevt((LPThdBlock)&(halmaster.super),evt);   
        Uart0Stop();      
        DisPowerOut();   
    }
    if((res & UART_ISR_RXBF) && (UART0->IER&UART_IER_RXBFIE))
    {
        if(UART0->RXBUF == CmdHeader)
        {
            evt = makeevt(Sig_Ir_Recv_Right,0);
        }
        else
        {
            evt = makeevt(Sig_Ir_Recv_Error,0);
        }  
       //    发送相关消息     
        postevt((LPThdBlock)&(halmaster.super),evt);               
        Uart0Stop();
        // 关闭红外接受IC 供电
        DisPowerOut();        
    }

}
